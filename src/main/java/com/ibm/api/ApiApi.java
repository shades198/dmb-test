/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ibm.api;

import com.ibm.model.Cart;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-12-02T07:10:08.531Z[GMT]")

@Validated
@Api(value = "api", description = "the api API")
public interface ApiApi {
    

    @ApiOperation(value = "Add a new item to the cart", nickname = "addCart", notes = "", tags={ "cart", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 500, message = "service unavailable") })
    @RequestMapping(value = "/api/cart",
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> addCart(@ApiParam(value = "Cart object that needs to be added to the eStore" ,required=true )  @Valid @RequestBody Cart body); 


    @ApiOperation(value = "Deletes a item into cart", nickname = "deleteByItemid", notes = "", tags={ "cart", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Item id not found") })
    @RequestMapping(value = "/api/cart/{customerid}/{itemid}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteByItemid(@ApiParam(value = "",required=true) @PathVariable("customerid") String customerid,@ApiParam(value = "Itemid to delete",required=true) @PathVariable("itemid") String itemid); 


    @ApiOperation(value = "Deletes a cart", nickname = "deleteCartBycustomerId", notes = "", tags={ "cart", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Customer details not found") })
    @RequestMapping(value = "/api/cart/{customerid}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteCartBycustomerId(@ApiParam(value = "customer id to delete",required=true) @PathVariable("customerid") String customerid); 


    @ApiOperation(value = "Find cart by cutsomerid", nickname = "getCustomerById", notes = "Returns a cart details by customerid", response = Cart.class, responseContainer = "List", tags={ "cart", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Cart.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Record not found") })
    @RequestMapping(value = "/api/cart/{customerid}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Cart>> getCustomerById(@ApiParam(value = "ID of Customer to return",required=true) @PathVariable("customerid") String customerid); 

}
